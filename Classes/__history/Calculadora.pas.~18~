unit Calculadora;

interface

uses
  Somar, Multiplicar, Modelo.Calculadora.Interfaces, System.Generics.Collections,
  Dividir, Subtrair, Contnrs;

type
  TCalculadora = class
  private
    FLista: TList<Variant>;
    FPilhaOperandos: TStack<Variant>;
    FPilhaOperadores: TStack<String>;
    FTotal: Variant;
    FSomar: TSomar;
    FDiv: TDividir;
    FSub: TSubtrair;
    FMult: TMultiplicar;
  public
    constructor Create;
    destructor Destroy; override;
    procedure LimparLista;
    procedure Adicionar(Value: Variant);
    function Total: Variant;
    procedure VerificarOperacao;
    procedure CalcularExpressaoPosfixa;
    procedure RealizarOperacao(Operacao: String);
  end;

implementation

{ TCalculadora }

constructor TCalculadora.Create;
begin
  FSomar := TSomar.Create;
  FMult := TMultiplicar.Create;
  FDiv := TDividir.Create;
  FSub := TSubtrair.Create;
  FLista := TList<Variant>.Create;
  FPilhaOperandos := TStack<Variant>.Create;
  FPilhaOperadores := TStack<String>.Create;
end;

destructor TCalculadora.Destroy;
begin
  FSomar.DisposeOf;
  FMult.DisposeOf;
  FSub.DisposeOf;
  FDiv.DisposeOf;
  FPilhaOperandos.Free;
  FPilhaOperadores.Free;
end;

procedure TCalculadora.Adicionar(Value: Variant);
begin
  FLista.Add(Value);
end;

procedure TCalculadora.LimparLista;
begin
  FLista.Clear;
  FPilhaOperandos.Clear;
  FPilhaOperadores.Clear;
end;

function TCalculadora.Total: Variant;
begin
  Result := FTotal;
end;

procedure TCalculadora.VerificarOperacao;
var
  idx: Integer;
  Item: Variant;
begin
  for idx := 0 to FLista.Count - 1 do
  begin
    Item := FLista[idx];
    if Item.isNumeric then
      FPilhaOperandos.Push(Item)
    else
    begin
      FPilhaOperadores.Push(Item);
      CalcularExpressaoPosfixa;
    end;
  end;
end;

procedure TCalculadora.CalcularExpressaoPosfixa;
begin
  while FPilhaOperadores.Count > 0 do
  begin
    RealizarOperacao(FPilhaOperadores.Pop);
  end;
end;

procedure TCalculadora.RealizarOperacao(Operacao: String);
var
  Operando2, Operando1: Variant;
begin
  if FPilhaOperandos.Count >= 2 then
  begin
    Operando2 := FPilhaOperandos.Pop;
    Operando1 := FPilhaOperandos.Pop;

    case Operacao of
      '+': FPilhaOperandos.Push(Operando1 + Operando2);
      '-': FPilhaOperandos.Push(Operando1 - Operando2);
      '*': FPilhaOperandos.Push(Operando1 * Operando2);
      '/': FPilhaOperandos.Push(Operando1 / Operando2);
    end;
  end;
end;

end.

